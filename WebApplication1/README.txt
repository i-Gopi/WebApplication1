Gopikrishnan Athimanna Thottathil
0850562

2024/01.11 
1230
Part 1
 Download and install Visual Studio Enterprise Edition. Ensure it's properly installed.
   
 Follow the official ASP.NET Core MVC tutorial provided by Microsoft, named "Start with MVC". During installation, make sure to mark the prerequisites needed for ASP.NET Core MVC.

 Create a new project named "WebApplication1" using .NET 8.0 (Long Term Support), adhering to the tutorial instructions.

 Handle SSL warning: When running the app, a warning popup may appear. Choose "Yes" for the SSL warning and CA warning. If you forget to mark the "Don't ask me again" box, you can handle it manually later.

 Start debugging: Select the "Start Debugging" option. If Microsoft Edge displays unauthorized certificate warnings, consider changing the browser to Firefox or another preferred browser.

 Browser selection: Utilize the dropdown bar near the debug option to choose your preferred web browser for debugging. This allows seamless switching between browsers.

 2024/1/16
 1630

 Part 2 
 * Added controller
 
 Step 1: Create HelloWorldController
 Navigate to Solution Explorer.
Right-click on Controllers and select Add > Controller.
 In the Add New Scaffolded Item dialog box, choose MVC Controller - Empty and click Add.
 Enter "HelloWorldController.cs" in the Add New Item dialog and click Add.
Step 2: Modify HelloWorldController
Replace the contents of the newly created HelloWorldController.cs with your desired code logic.
Step 3: Test the Controller
- Access "https://localhost:7299/HelloWorld" to view the default message.
- For personalized greeting, tried "https://localhost:7299/HelloWorld/Welcome?name=Rick&numtimes=4" in the browser.


Part 3
2024/1/17 
2130

Add a view 
   In the helloworld controller replaced the index method
   Added a new folder named helloworld
   Replaced the contents of the Views/HelloWorld/Index.cshtml
   Navigated to https://localhost:PORT numer/HelloWorld
   Replaced the content of the Views/Shared/_Layout.cshtml
   Opened the Views/HelloWorld/Index.cshtml view file and Changed the title and elements.
   Browser title,Primary heading and Secondary headings has been changed.
   Replaced the contents of Views/HelloWorld/Welcome.cshtml.




Part 4
2024/1/23 1300

 Utilize the scaffolding package to streamline the creation of edit, update, and delete functionalities within the application.
 Add a new class named "Movie.cs" under the Model folder to represent the data structure and business logic related to movies.
 Under the Controllers folder, added a new scaffolded item, selecting the "Movie" option to generate necessary controller actions for managing movie data.
 Accessed the NuGet Package Manager from the Tools menu and execute required migration commands in the Package Manager Console to incorporate changes into the database schema.
 Generated a Migration folder containing necessary database migration scripts.
 Launched the application and selected the Movie App to modify movie data using the provided edit, update, and delete functionalities.

Completed part 4

Part 5
2024/1/24 1900

work with a database
     Examined the database by navigating into sql server>Databases>dbo.movie>view data
     Created a class named seed data in the model folder.
     Replaced the contents of program.cs file






Part 6
2024/1/24    2000

Controller Methods and Views
    Opened the Models/Movie.cs file and updated it
    Edit, Details, and Delete links are generated by the Core MVC Anchor Tag Helper in the Views/Movies/Index.cshtml file


part 7
2024/1/26  1800

To add the search bar
    updated the index method found inside the  Controllers/MoviesController.cs
    Changed the parameter to id and all occurrences of searchString to id.
    changed the index method back so that the it takes a parameter named searchstring
    Opened the Views/Movies/Index.cshtml file, and added the <form> markup to use the form tag helper.so when we submit the  form, the filter string is posted to the Index action of the movies controller.

To add the search by genre.
    Created a new class in the models folder called MovieGenreViewModel.
    Replaced the Index method in MoviesController.cs

To add search by genre to the Index view.
     Updated the  Index.cshtml found in Views/Movies.



Part 8
2024/1/28   1745

To add a Rating Property to the Movie Model.
    Added rating property into Models/Movie.cs
    In MoviesController.cs updated the [Bind] attribute for both the Create and Edit action methods to include the Rating property.
    Edited the /Views/Movies/Index.cshtml file and added a Rating field
    Updated the /Views/Movies/Create.cshtml with a Rating field
    Updated the SeedData by adding the rating division. so that it provides a value for the new column.
    The app was not working until the the data base was updated.so updated the database by entering ADD MIGRATION command in PMC.


Part 9
2024/1/29  1830

To Add validation.
    updated the Movie class to take advantage of the built-in validation attributes Required, StringLength, RegularExpression, Range and the DataType formatting attribute.
    Minimum lenght and regular expression attributes are added to limit charecter input
    An error has been occured after this and the problem is solved by adding rating to the movies that are already present in data base
    Data base was opened by navigating through view>SQL server object Explorer>sql server>Data bases>MvcMovie context>dbo.movie


Part 10
2024/1/30 1115

Examine the Details and Delete methods 
    Opened the movie controller class to examine the details method.
    Recalled the seqments that are defined in program.cs
    Examined the delete and deleteconfirmed methods.
    The [HttpPost] method that deletes the data is named DeleteConfirmed to give the HTTP POST method a unique signature or name. 


